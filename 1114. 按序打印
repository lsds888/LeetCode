/*
我们提供了一个类：
public class Foo {
  public void one() { print("one"); }
  public void two() { print("two"); }
  public void three() { print("three"); }
}
三个不同的线程将会共用一个 Foo 实例。
线程 A 将会调用 one() 方法
线程 B 将会调用 two() 方法
线程 C 将会调用 three() 方法
请设计修改程序，以确保 two() 方法在 one() 方法之后被执行，three() 方法在 two() 方法之后被执行。
示例 1:
输入: [1,2,3]
输出: "onetwothree"
解释: 
有三个线程会被异步启动。
输入 [1,2,3] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。
正确的输出是 "onetwothree"。
示例 2:
输入: [1,3,2]
输出: "onetwothree"
解释: 
输入 [1,3,2] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 three() 方法，线程 C 将会调用 two() 方法。
正确的输出是 "onetwothree"。
注意:
尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。
你看到的输入格式主要是为了确保测试的全面性。
*/

#include <iostream>
#include <mutex>
#include <thread>

using namespace std;

class Foo {
public:
    Foo() {
        
    }

    void first(function<void()> printFirst) {
        std::unique_lock<std::mutex> lk(g_mutex);
        // printFirst() outputs "first". Do not change or remove this line.
        printFirst();
        count++;
        cv1.notify_one();
    }

    void second(function<void()> printSecond) {
        std::unique_lock<std::mutex> lk(g_mutex);
        cv1.wait(lk,[this](){return count==2;});
        // printSecond() outputs "second". Do not change or remove this line.
        printSecond();
        count++;
        cv2.notify_one();
    }

    void third(function<void()> printThird) {
        std::unique_lock<std::mutex> lk(g_mutex);
        cv2.wait(lk,[this](){return count==3;});
        // printThird() outputs "third". Do not change or remove this line.
        printThird();
    }
private:
    int count=1;
    std::condition_variable cv1;
    std::condition_variable cv2;
    std::mutex g_mutex;
};

void printFirst(){
    cout<<"first"<<endl;
}

void printSecond(){
    cout<<"second"<<endl;
}

void printThird(){
    cout<<"third"<<endl;
}


int main(){
    Foo f;
    std::thread mythread1(&Foo::first,&f,printFirst);  //使用类的函数作为线程的执行函数
    std::thread mythread2(&Foo::second,&f,printSecond);
    std::thread mythread3(&Foo::third,&f,printThird);
    mythread1.join();
    mythread2.join();
    mythread3.join();
    cout<<"main()执行完毕。。。"<<endl;
    return 0;
}
