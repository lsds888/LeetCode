给定一个未排序的整数数组，找出其中没有出现的最小的正整数。

示例 1:

输入: [1,2,0]
输出: 3
示例 2:

输入: [3,4,-1,1]
输出: 2
示例 3:

输入: [7,8,9,11,12]
输出: 1
说明:

你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。



class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int len=nums.size();
        if(len==0)
            return 1;
        for(int i=0;i<len;i++){
            if(nums[i]>0&&nums[i]<i+1&&nums[i]!=nums[nums[i]-1]){
                swap(nums[i],nums[nums[i]-1]);
                i--;//进行交换之后，需要对交换过来的数再次进行上述判断，即i--与循环i++抵消一次
            }
        }
        for(int i=0;i<len;i++){
            if(nums[i]!=i+1)
                return i+1;
        }
        return len+1;
    }
};
