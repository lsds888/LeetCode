/*
编写一个可以从 1 到 n 输出代表这个数字的字符串的程序，但是：
如果这个数字可以被 3 整除，输出 "fizz"。
如果这个数字可以被 5 整除，输出 "buzz"。
如果这个数字可以同时被 3 和 5 整除，输出 "fizzbuzz"。
例如，当 n = 15，输出： 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz。
假设有这么一个类：
class FizzBuzz {
  public FizzBuzz(int n) { ... }               // constructor
  public void fizz(printFizz) { ... }          // only output "fizz"
  public void buzz(printBuzz) { ... }          // only output "buzz"
  public void fizzbuzz(printFizzBuzz) { ... }  // only output "fizzbuzz"
  public void number(printNumber) { ... }      // only output the numbers
}
请你实现一个有四个线程的多线程版  FizzBuzz， 同一个 FizzBuzz 实例会被如下四个线程使用：
线程A将调用 fizz() 来判断是否能被 3 整除，如果可以，则输出 fizz。
线程B将调用 buzz() 来判断是否能被 5 整除，如果可以，则输出 buzz。
线程C将调用 fizzbuzz() 来判断是否同时能被 3 和 5 整除，如果可以，则输出 fizzbuzz。
线程D将调用 number() 来实现输出既不能被 3 整除也不能被 5 整除的数字。
*/

#include <iostream>
#include <mutex>
#include <thread>

using namespace std;

class FizzBuzz {
private:
    int n;
    int i;
    std::mutex g_mutex;
    std::condition_variable cv;

public:
    FizzBuzz(int n) :i(1){
        this->n = n;
    }

    // printFizz() outputs "fizz".
    void fizz(function<void()> printFizz) {
        while(i<=n){
            std::unique_lock<std::mutex> lk(g_mutex);
            cv.wait(lk,[this](){return (i%3==0&&i%5!=0)||(i>n);});
            if(i<=n){
                printFizz();
                ++i;
            }
            cv.notify_all();
        }
    }

    // printBuzz() outputs "buzz".
    void buzz(function<void()> printBuzz) {
        while(i<=n){
            std::unique_lock<std::mutex> lk(g_mutex);
            cv.wait(lk,[this](){return (i%3!=0&&i%5==0)||(i>n);});
            if(i<=n){
                printBuzz();
                ++i;
            }
            cv.notify_all();
        }
    }

    // printFizzBuzz() outputs "fizzbuzz".
	void fizzbuzz(function<void()> printFizzBuzz) {
        while(i<=n){
            std::unique_lock<std::mutex> lk(g_mutex);
            cv.wait(lk,[this](){return (i%3==0&&i%5==0)||(i>n);});
            if(i<=n){
                printFizzBuzz();
                ++i;
            }

            cv.notify_all();
        }
    }

    // printNumber(x) outputs "x", where x is an integer.
    void number(function<void(int)> printNumber) {
        while(i<=n){
            std::unique_lock<std::mutex> lk(g_mutex);
            cv.wait(lk,[this](){return (i%3!=0&&i%5!=0)||(i>n);});
            printNumber(i);
            i++;
            cv.notify_all();
        }
    }
};

void printFizz(){
    cout<<"fizz"<<" ";
}

void printBuzz(){
    cout<<"buzz"<<" ";
}

void printFizzBuzz(){
    cout<<"fizzbuzz"<<" ";
}

void printNumber(int i){
    cout<<i<<" ";
}

int main(){
    FizzBuzz fb(15);
    std::thread mythread1(&FizzBuzz::fizz,&fb,printFizz);
    std::thread mythread2(&FizzBuzz::buzz,&fb,printBuzz);
    std::thread mythread3(&FizzBuzz::fizzbuzz,&fb,printFizzBuzz);
    std::thread mythread4(&FizzBuzz::number,&fb,printNumber);

    mythread1.join();
    mythread2.join();
    mythread3.join();
    mythread4.join();
    cout <<endl;
    return 0;
}
