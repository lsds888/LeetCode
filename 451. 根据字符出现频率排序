给定一个字符串，请将字符串里的字符按照出现的频率降序排列。

示例 1:

输入:
"tree"

输出:
"eert"

解释:
'e'出现两次，'r'和't'都只出现一次。
因此'e'必须出现在'r'和't'之前。此外，"eetr"也是一个有效的答案。
示例 2:

输入:
"cccaaa"

输出:
"cccaaa"

解释:
'c'和'a'都出现三次。此外，"aaaccc"也是有效的答案。
注意"cacaca"是不正确的，因为相同的字母必须放在一起。
示例 3:

输入:
"Aabb"

输出:
"bbAa"

解释:
此外，"bbaA"也是一个有效的答案，但"Aabb"是不正确的。
注意'A'和'a'被认为是两种不同的字符。


class Solution {
public:
    static bool cmp(const pair<int,int>& map1,const pair<int,int>& map2){
        return map1.second > map2.second;
    }
    
    string frequencySort(string s) {
        unordered_map<char,int> map;
        vector<pair<char,int>> map1;
        for(int i=0;i<s.length();i++)
            map[s[i]]++;
        for(auto it=map.begin();it!=map.end();it++){
            map1.push_back(make_pair(it->first,it->second));
        }
        
        sort(map1.begin(),map1.end(),cmp);
        string str="";
        for(auto it =map1.begin();it!=map1.end();it++){
            for(int i=0;i<it->second;i++)
                str+=it->first;
        }
        return str;
    }
};
