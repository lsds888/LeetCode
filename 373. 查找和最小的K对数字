给定两个以升序排列的整形数组 nums1 和 nums2, 以及一个整数 k。

定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2。

找到和最小的 k 对数字 (u1,v1), (u2,v2) ... (uk,vk)。

示例 1:

输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出: [1,2],[1,4],[1,6]
解释: 返回序列中的前 3 对数：
     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
示例 2:

输入: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
输出: [1,1],[1,1]
解释: 返回序列中的前 2 对数：
     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
示例 3:

输入: nums1 = [1,2], nums2 = [3], k = 3 
输出: [1,3],[2,3]
解释: 也可能序列中所有的数对都被返回:[1,3],[2,3]

class Solution {
public:
    static bool cmp(const pair<int,int> &p1,const pair<int,int> &p2){
        return p1.first+p1.second < p2.first+p2.second;
    }
    
    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        int n1=nums1.size();
        int n2=nums2.size();
        vector<pair<int,int>> v;
        vector<pair<int,int>> res;
        if(n1==0||n2==0)
            return res;
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                v.push_back(make_pair(nums1[i],nums2[j]));
            }
        }
        if(n1*n2<=k)
            return v;
        sort(v.begin(),v.end(),cmp);
        for(int i=0;i<k;i++){
            res.push_back(v[i]);
        }
        return res;
    }
};

执行用时: 112 ms, 在Find K Pairs with Smallest Sums的C++提交中击败了20.00% 的用户
