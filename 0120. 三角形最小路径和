给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

说明：

如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。

//原地修改,从下到上，每次上一层可选的都为下面同位置或下面同位置+1，取更小的就好了
int minimumTotal(vector<vector<int>>& triangle) {
    int n=triangle.size();
    for(int i=n-2;i>=0;i--){
        for(int j=0;j<=i;j++){
            triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1]);
        }
    }
    return triangle[0][0];
}

//滚动数组优化一维观察可见 当计算第2层时 只会用到第3层的值，不会用到第4层的值，故可将数组的值覆盖到之前的值上，达到空间优化目的
int minimumTotal(vector<vector<int>>& triangle) {
    int n=triangle.size();
    vector<int> vec(n);
    for(int i=n-1;i>=0;i--){
        for(int j=0;j<=i;j++){
            vec[j]=(i==n-1) ? triangle[i][j] : (triangle[i][j]+min(vec[j],vec[j+1]));
        }
    }
    return vec[0];
}
