根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
   
   
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int li=inorder.size();
        if(li==0)
            return NULL;
        vector<int> in_l,in_r,po_l,po_r;
        TreeNode* root=new TreeNode(postorder[li-1]);
        int i;
        for(i=0;i<li;i++){
            if(inorder[i]==postorder[li-1])
                break;
        }
        for(int j=0;j<i;j++){
            in_l.push_back(inorder[j]);
            po_l.push_back(postorder[j]);
        }
        for(int j=i+1;j<li;j++){
            in_r.push_back(inorder[j]);
        }
        for(int j=i;j<li-1;j++){
            po_r.push_back(postorder[j]);
        }
        root->left=buildTree(in_l,po_l);
        root->right=buildTree(in_r,po_r);
        return root;
    }
};
