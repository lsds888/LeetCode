给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明: 叶子节点是指没有子节点的节点。

示例:

给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回它的最小深度  2.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==NULL) return 0;
        if(root->left==NULL&&root->right==NULL) return 1;
        int l=0;
        int r=0;
        if(root->left)
            l=minDepth(root->left);
        else
            l=INT_MAX;
        if(root->right)
            r=minDepth(root->right);
        else
            r=INT_MAX;
        return min(l,r)+1;
    }
};


执行用时: 8 ms, 在Minimum Depth of Binary Tree的C++提交中击败了66.99% 的用户
