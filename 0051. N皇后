/*
n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
上图为 8 皇后问题的一种解法。
给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。
每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。
示例:
输入: 4
输出: [
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。
*/
#include "head.h"

void dfs(int n,int level,vector<vector<string>> &res,vector<string> &vec,vector<int> lie,vector<int> u,vector<int> v){
    if(level==n){
        res.push_back(vec);
        return;
    }
    for(int i=0;i<n;i++){
        if(lie[i]==0 && u[level-i+n-1]==0 && v[level+i]==0){
            lie[i]=1;
            u[level-i+n-1]=1;
            v[level+i]=1;
            vec[level][i]='Q';
            dfs(n,level+1,res,vec,lie,u,v);
            vec[level][i]='.';
            lie[i]=0;
            u[level-i+n-1]=0;
            v[level+i]=0;
        }
    }
}

vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> res;
    vector<string> vec(n,string(n,'.'));
    vector<int> lie(n,0); //列
    vector<int> u(2*n,0);   //从左上到右下
    vector<int> v(2*n,0);   //右上到左下
    dfs(n,0,res,vec,lie,u,v);
    return res;
}

int main(){
    printvectorstr(solveNQueens(4));
    return 0;
}
