给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
void helper(TreeNode* root,int sum,int& flag){
    if(root==nullptr){
        return;
    }
    sum-=root->val;
    if(sum==0&&root->left==nullptr&&root->right==nullptr){
        flag++;
    }
    helper(root->left,sum,flag);
    helper(root->right,sum,flag);
}

bool hasPathSum(TreeNode* root, int sum) {
    int flag=0;
    helper(root,sum,flag);
    if(flag>=1){
        return true;
    }else{
        return false;
    }
}
};
执行用时: 8 ms, 在Path Sum的C++提交中击败了98.06% 的用户
