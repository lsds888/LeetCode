中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。

例如，

[2,3,4] 的中位数是 3

[2,3] 的中位数是 (2 + 3) / 2 = 2.5

设计一个支持以下两种操作的数据结构：

void addNum(int num) - 从数据流中添加一个整数到数据结构中。
double findMedian() - 返回目前所有元素的中位数。
示例：

addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2
进阶:

如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？
如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？

class MedianFinder {
public:
    /** initialize your data structure here. */
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(p.empty()||p.top()>=num){
            p.push(num);
        }else{
            q.push(num);
        }
        if(p.size()==q.size()+2){
            q.push(p.top());
            p.pop();
        }
        if(p.size()+1==q.size()){
            p.push(q.top());
            q.pop();
        }
    }
    
    double findMedian() {
        return p.size()==q.size() ? (p.top()+q.top())/2.0:p.top();
    }
private:
    priority_queue<int,vector<int>,less<int>> p;//大顶堆
    priority_queue<int,vector<int>,greater<int>> q;//小顶堆

};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
