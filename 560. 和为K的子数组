给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        /*int res=0;
        int n=nums.size();
        vector<int> s(n+1,0);
        for(int i=1;i<=n;i++){
            s[i]=s[i-1]+nums[i-1];
        }
        for(int i=0;i<=n;i++){
            for(int j=i+1;j<=n;j++){
                if(s[j]-s[i]==k)
                    res+=1;
            }
        }
        return res;*/
         int n=nums.size();
        int sum=0,res=0;
        unordered_map<int,int> m;
        m[0]=1;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            res+=m[sum-k];
            m[sum]+=1;
        }
        return res;
    }
};
