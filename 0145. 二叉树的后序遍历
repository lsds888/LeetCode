给定一个二叉树，返回它的 后序 遍历。

示例:

输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [3,2,1]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> vec;
        if(root==NULL) return vec;
        stack<TreeNode*> s;
        TreeNode* pcur=root;
        TreeNode* plast=NULL;
        while(pcur){
            s.push(pcur);
            pcur=pcur->left;
        }
        while(!s.empty()){
            pcur=s.top();
            s.pop();
            if(pcur->right==NULL || pcur->right==plast){
                vec.push_back(pcur->val);
                plast=pcur;
            }else{
                s.push(pcur);
                pcur=pcur->right;
                while(pcur){
                    s.push(pcur);
                    pcur=pcur->left;
                }
            }
        }
        return vec;
    }
};





//两个栈的代码

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> vec;
        if(root==NULL)
            return vec;
        stack<TreeNode*> s1;
        stack<TreeNode*> s2;
        s1.push(root);
        while(!s1.empty()){
            root=s1.top();
            s1.pop();
            s2.push(root);
            if(root->left!=NULL)
                s1.push(root->left);
            if(root->right!=NULL)
                s1.push(root->right);
        }
        while(!s2.empty()){
            vec.push_back(s2.top()->val);
            s2.pop();
        }
        return vec;
    }
};
