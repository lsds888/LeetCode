给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

示例:

给定 1->2->3->4, 你应该返回 2->1->4->3.
说明:

你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

//dummy->1->2->3->4  ,head为链表的头结点，对于1->2->3->4  head=1

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL||head->next==NULL) return head;
        //if(head==NULL) return head;
        ListNode* dummy=new ListNode(-1);
        dummy->next=head;
        ListNode* n0=dummy;
        ListNode* n1=head;
        ListNode* n2=head->next;
        while(n1!=NULL&&n1->next!=NULL){
            n1->next=n2->next;
            n2->next=n1;
            n0->next=n2;
            
            n0=n1;
            n1=n0->next;
            if(n1!=NULL)
                n2=n1->next;
        }
        return dummy->next;
    }
};

//dummy->1->2->3->4  ,head为链表的头结点，对于1->2->3->4  head=1
