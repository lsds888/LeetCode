给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
说明:

如果你可以运用递归和迭代两种方法解决这个问题，会很加分。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root1,TreeNode* root2){
    if(root1==nullptr&&root2==nullptr){
        return true;
    }
    if(root1==nullptr||root2==nullptr){
        return false;
    }
    if(root1->val!=root2->val){
        return false;
    }
    return helper(root1->left,root2->right)&&helper(root1->right,root2->left);
}


bool isSymmetric(TreeNode* root) {
    if(root==nullptr){
        return true;
    }
    return helper(root->left,root->right);
}
执行用时: 4 ms, 在Symmetric Tree的C++提交中击败了100.00% 的用户
