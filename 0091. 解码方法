/*一条包含字母 A-Z 的消息通过以下方式进行了编码：
'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。
示例 1:
输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:
输入: "226"
输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
*/
#include"head.h"

/*
使用dp[i]来表示s[0...i]的编译的方法数
分情况讨论：
    (1)若s[i]='0',那么若s[i-1]='1' or '2' ,则dp[i]=dp[i-2];否则return 0;
        解释：s[i-1]+s[i] 唯一被译码，不增加情况
    (2)若s[i-1]='1',则dp[i]=dp[i-1]+dp[i-2]
        解释：s[i-1]与s[i]分开译码为dp[i-1],合并译码为dp[i-2]
    (3)若s[i-1]='2'and'1'<=s[i]<='6'，则dp[i]=dp[i-1]+dp[i-2]
*/

int numDecodings(string s) {
    if(s[0]=='0')
        return 0;
    vector<int> dp;
    int pre=1;
    int cur=1;
    for(int i=1;i<s.size();i++){
        int temp=cur;
        if(s[i]=='0'){
            if(s[i-1]=='1'||s[i-1]=='2'){
                // dp[i]=dp[i-2];
                cur=pre;
            }else{
                return 0;
            }
        }else{
            if(s[i-1]=='1'||(s[i-1]=='2'&&s[i]>='1'&&s[i]<='6')){
                // dp[i]=dp[i-1]+dp[i-2];
                cur=cur+pre;
            }
        }
        pre=temp;
    }
    // return dp[s.size()-1];
    return cur;
}

int main(){
    string s="12";
    cout<<numDecodings(s)<<endl;
    return 0;
}
