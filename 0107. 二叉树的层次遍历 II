给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<int> vec;
        vector<vector<int>> res;
        stack<vector<int>> sta;
        queue<TreeNode*> q1,q2;
        if(root==NULL) return res;
        q1.push(root);
        while(!q1.empty()){
            TreeNode* p=q1.front();
            q1.pop();
            vec.push_back(p->val);
            if(p->left){
                q2.push(p->left);
            }
            if(p->right){
                q2.push(p->right);
            }
            if(q1.empty()){
                sta.push(vec);
                vec.clear();
                swap(q1,q2);
            }
        }
        while(!sta.empty()){
            res.push_back(sta.top());
            sta.pop();
        }
        return res;
    }
};


执行用时: 4 ms, 在Binary Tree Level Order Traversal II的C++提交中击败了100.00% 的用户
