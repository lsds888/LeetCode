实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

void sort(vector<int> &v, int begin, int end) {
    for (int i = begin; i < end; ++i) 
        for (int j = i + 1; j <= end; j++) 
            if (v[i] > v[j]) swap(v[i], v[j]);           
}

class Solution {
public:
    void nextPermutation(vector<int> &nums) {
        bool flag = true;
        for (int i = nums.size() - 1; i > 0; --i) {
            int start, new_start;
            if (nums[i] > nums[i - 1]) {
                start = i - 1;
                while (i < nums.size() && nums[i] > nums[start]) i++;
                new_start = i - 1;
                swap(nums[start], nums[new_start]);
                sort(nums, start + 1, nums.size() - 1);
                flag = false;
                break;
            }
        }
        if(flag){
            sort(nums,0,nums.size()-1);
        }
    }
};
