给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。



示例:

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。

class Solution {
private:
    const string letterMap[10]={
        " ",//0
        "",//1
        "abc",//2
        "def",//3
        "ghi",//4
        "jkl",//5
        "mno",//6
        "pqrs",//7
        "tuv",//8
        "wxyz",//9
    };
    
    vector<string> res;
    
    void findCombination(const string &digits,int index,const string &s){
        if(index==digits.size()){
            res.push_back(s);
            return;
        }
        char c=digits[index];
        string letters=letterMap[c-'0'];
        for(int i=0;i<letters.size();i++){
            findCombination(digits,index+1,s+letters[i]);
        }
        return;
    }
public:
    vector<string> letterCombinations(string digits) {
        res.clear();
        if(digits.size()==0)
            return res;
        findCombination(digits,0,"");
        return res;
    }
};



执行用时: 8 ms, 在Letter Combinations of a Phone Number的C++提交中击败了14.70% 的用户
内存消耗: 8.8 MB, 在Letter Combinations of a Phone Number的C++提交中击败了0.93% 的用户
