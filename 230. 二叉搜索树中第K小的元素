给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root,vector<int> &v){
        if(!root){
            return;
        }
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> vec;
        inorder(root,vec);
        return vec[k-1];
    }
};




非递归中序遍历

class Solution {
public:
    TreeNode* KthNode(TreeNode* pRoot, int k)
    {
        vector<TreeNode*> vec;
        stack<TreeNode*> sta;
        TreeNode* p=pRoot;
        while(!sta.empty()||p){
            while(p){
                sta.push(p);
                p=p->left;
            }
            if(!sta.empty()){
                p=sta.top();
                sta.pop();
                vec.push_back(p);
                if(vec.size()==k)
                    return p;
                p=p->right;
            }
        }
        return NULL;
    }
};

