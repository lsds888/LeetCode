给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。

示例 :

给定这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

说明 :

你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        if(head==nullptr){
            return head;
        }
        ListNode* dummy=new ListNode(-1);
        dummy->next=head;
        ListNode* pre=dummy->next;
        ListNode* pcur=pre->next;
        while(pcur){
            pre->next=pcur->next;
            pcur->next=dummy->next;
            dummy->next=pcur;
            pcur=pre->next;
        }
        return dummy->next;
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *fast=head, *pre, *re;
        //找到前K个节点断开
        int a=k;
        while(a--){
            if(!fast) return head;
            pre=fast;
            fast=fast->next;
        }
        pre->next=nullptr;
        //前K个节点的链表转置
        re=reverse(head);
        //递归，k个一组翻转链表
        head->next=reverseKGroup(fast, k);
        return re;
    }
};
