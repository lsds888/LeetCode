给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。

示例 1:

输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。
    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。
    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。
示例 2:

输入: nums1 = [2,4], nums2 = [1,2,3,4].
输出: [3,-1]
解释:
    对于num1中的数字2，第二个数组中的下一个较大数字是3。
    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。
注意:

nums1和nums2中所有元素是唯一的。
nums1和nums2 的数组大小都不超过1000。

class Solution {
public:
    int index(vector<int>& nums2 , int k){
        int n=nums2.size()-1;
        int i=0;
        while(i<=n){
            if(nums2[i]==k)
                return i;
            else
                i++;
        }
        return -1;
    }
    
    int helper(vector<int>& nums1,vector<int>& nums2,int k){
        int n=nums2.size();
        int in=index(nums2,k);
        for(int i=in;i<n-1;i++){
            if(nums2[in]<nums2[i+1]){
                return nums2[i+1];
            }
        }
        return -1;
    }
    
    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {
        vector<int> vec;
        int nf=findNums.size();
        for(int i=0;i<nf;i++){
            int m=helper(findNums,nums,findNums[i]);
            vec.push_back(m);
        }
        return vec;
    }
};


执行用时: 8 ms, 在Next Greater Element I的C++提交中击败了99.67% 的用户
