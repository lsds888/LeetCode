/*运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。
获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。
进阶:
你是否可以在 O(1) 时间复杂度内完成这两种操作？
示例:
LRUCache cache = new LRUCache( 2  缓存容量  );
cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得密钥 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得密钥 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4
*/

#include"head.h"

class LRUCache{
private:
    struct Node{
        int key;
        int value;
        Node(int k,int v):key(k),value(v){}
    };
public:
    LRUCache(int c):capacity(c){}
    int get(int key){
        if(cachemap.find(key)==cachemap.end()){
            return -1;
        }
        cachelist.splice(cachelist.begin(),cachelist,cachemap[key]);//把取的key的值放到链表的第一个位置，因为其刚被访问过
        cachemap[key]=cachelist.begin();
        return cachemap[key]->value;

    }

    void put(int key,int value){
        if(cachemap.find(key)==cachemap.end()){
            //删除最后一个将其加入到链表的第一个位置
            if(cachelist.size()==capacity){
                cachemap.erase(cachelist.back().key);
                cachelist.pop_back();
            }
            cachelist.push_front(Node(key,value));
            cachemap[key]=cachelist.begin();
        }else{
            //更新节点的值，并将其加到链表的第一个位置
            cachemap[key]->value=value;
            cachelist.splice(cachelist.begin(),cachelist,cachemap[key]);
            cachemap[key]=cachelist.begin();
        }
    }

private:
    int capacity;
    list<Node> cachelist;
    unordered_map<int,list<Node>::iterator> cachemap;
};
