给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1
 

示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7
 

注意: 您可以假设树（即给定的根节点）不为 NULL。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:    
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        int i=INT_MAX;
        while(!q.empty()){
            TreeNode* m=q.front();
            i=m->val;
            int n=q.size();
            for(int j=0;j<n;j++){
                TreeNode* p=q.front();
                if(p->left)
                    q.push(p->left);
                if(p->right)
                    q.push(p->right);
                q.pop();
            }
        }
        return i;
    }
};


执行用时: 8 ms, 在Find Bottom Left Tree Value的C++提交中击败了96.82% 的用户
