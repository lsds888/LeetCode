给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.size()==1){
            return true;
        }
        int n=-2;
        for(int i=nums.size()-2;i>=0;i--){// 从后往前找，把当前过不了的坑的位置记录起来
            if(nums[i]==0&&n<0){// 如果遇到新的坑并且当前没有坑，则记录坑的位置
                n=i;
                continue;
            }
            if(n>=0 && nums[i]>n-i){ // 如果发现元素的值大于元素和坑的距离，说明可以跳过这个坑，将坑的下标置为-1，继续往前找坑
                n=-1;
            }
        }
        return n<0;// 走到起点发现没有记录到坑，说明可以跳过去，否则返回false
    }
};
