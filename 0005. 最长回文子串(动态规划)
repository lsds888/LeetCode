给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-palindromic-substring
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    string longestPalindrome(string s) {
        int i,j,l = 0,r = 0,ans = 1,len = s.length();
        vector<vector<int>> dp(len,vector<int>(len));
        for(i = 0; i < len; i++)
            dp[i][i] = 1;                //初始化
        for(i = len-2; i >= 0; i--){
            for(j = i+1; j < len; j++){
                if(s[i] == s[j]){
                    if(i == j-1){
                        dp[i][j] = 1;
                    }else{
                        dp[i][j] = dp[i+1][j-1];
                    }
                }
                if(dp[i][j] == 1 && j-i+1 > ans){
                    l = i;
                    r = j;
                    ans = j-i+1;
                }
            }
        }
        return s.substr(l,ans);
    }
};

动态规划的方法，我会在下一篇单独来介绍，这里只说明此题的DP代码

 对于字符串str，假设dp[i,j]=1表示str[i...j]是回文子串，那个必定存在dp[i+1,j-1]=1。这样最长回文子串就能分解成一系列子问题，
 可以利用动态规划求解了。首先构造状态转移方程
 





      上面的状态转移方程表示，当str[i]=str[j]时，如果str[i+1...j-1]是回文串，则str[i...j]也是回文串；如果str[i+1...j-1]不是回文串，
      则str[i...j]不是回文串。

      初始状态

dp[i][i]=1
dp[i][i+1]=1 if str[i]==str[i+1]
      上式的意义是单个字符，两个相同字符都是回文串。
      
      
https://www.cnblogs.com/Mrwho1/p/9209285.html
