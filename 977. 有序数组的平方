给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。
class Solution {
public:
    int helper(int a){
        return a*a;
    }
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> res;
        for(int i=0;i<A.size();i++){
            res.push_back(helper(A[i]));
        }
        sort(res.begin(),res.end());
        return res;
    }
};

执行用时: 180 ms, 在Squares of a Sorted Array的C++提交中击败了9.88% 的用户
内存消耗: 12.3 MB, 在Squares of a Sorted Array的C++提交中击败了100.00% 的用户
