给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<int> vec;
        vector<vector<int>> res;
        if(root==NULL) return res;
        bool ltor=true;
        stack<TreeNode*> currlev,nextlev;
        currlev.push(root);
        while(!currlev.empty()){
            TreeNode* currnode=currlev.top();
            currlev.pop();
            if(currnode){
                vec.push_back(currnode->val);
                if(ltor){
                    nextlev.push(currnode->left);
                    nextlev.push(currnode->right);
                }else{
                    nextlev.push(currnode->right);
                    nextlev.push(currnode->left);
                }
            }
            if(currlev.empty()){
                if(!vec.empty())
                    res.push_back(vec);
                vec.clear();
                ltor=!ltor;
                swap(currlev,nextlev);
            }
        }
        return res;
    }
};
