给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    int level(TreeNode* root){
    if(root==NULL)
        return 0;
    else
        return max(level(root->left),level(root->right))+1;
}

bool isBalanced(TreeNode* root){
    if(root==nullptr){
        return true;
    }
    int l_len=level(root->left);
    int r_len=level(root->right);
    int i=abs(l_len-r_len);
    if(i<=1&&isBalanced(root->left)&&isBalanced(root->right)){
        return true;
    }else{
        return false;
    }
}
};


执行用时: 8 ms, 在Balanced Binary Tree的C++提交中击败了98.06% 的用户
