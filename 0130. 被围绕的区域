给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。
如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。



class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.empty()||board.size() == 0 || board[0].size() == 0)
            return;
        int row=board.size(),column=board[0].size();
         for (int i = 0; i < row; ++i) {
            check(board, i, 0);             // first column
            check(board, i, column - 1);       // last column
        }
        for (int j = 1; j < column - 1; ++j) {
            check(board, 0, j);             // first row
            check(board, row - 1, j);       // last row
        }
        for (int i = 0; i < row; ++i)
            for (int j = 0; j < column; ++j)
                if (board[i][j] == 'O') board[i][j] = 'X';
                else if (board[i][j] == '1') board[i][j] = 'O';
    
      
    }
    void check(vector<vector<char>>& board,int x,int y)
    {
        if(board[x][y]=='O'){
                board[x][y]='1';
        if(x>1) check(board,x-1,y);
        if(y>1) check(board,x,y-1);
        if(x<board.size()-1) check(board,x+1,y);
        if(y<board[0].size()-1) check(board,x,y+1);
        }
        return;
    }
};

https://blog.csdn.net/qq_41098649/article/details/81455813
