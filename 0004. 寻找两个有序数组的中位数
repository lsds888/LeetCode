class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1,vector<int>& nums2){
    int m=nums1.size();
    int n=nums2.size();
    if(m==0){
        if(n%2==0){
            return (double(nums2[n/2-1])+double(nums2[n/2]))/2;
        }else{
            return nums2[n/2];
        }
    }else if(n==0){
        if(m%2==0){
            return (double(nums1[m/2-1])+double(nums1[m/2]))/2;
        }else{
            return nums1[m/2];
        }
    }
    if(m>n){
        vector<int> temp;
        temp=nums1;
        nums1=nums2;
        nums2=temp;
    }
    int imin=0,imax=m,half=(m+n+1)/2;
    while(imin<=imax){
        int i=(imin+imax)/2;
        int j=half-i;
        if(i<imax && nums2[j-1]>nums1[i]){
            imin=i+1;
        }else if(i>imin && nums1[i-1]>nums2[j]){
            imax=i-1;
        }else{
            double maxleft=0;
            if(i==0){
                maxleft=nums2[j-1];
            }else if(j==0){
                maxleft=nums1[i-1];
            }else{
                maxleft=max(nums1[i-1],nums2[j-1]);
            }
            if((m+n)%2==1){
                return maxleft;
            }

            double minright=0;
            if(i==m){
                minright=nums2[j];
            }else if(j==n){
                minright=nums1[i];
            }else{
                minright=min(nums1[i],nums2[j]);
            }
            return (maxleft+minright)/2;
        }
    }
        return 0.0;
}
};
