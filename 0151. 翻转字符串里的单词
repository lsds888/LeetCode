/*
给定一个字符串，逐个翻转字符串中的每个单词.
示例 1：
输入: "the sky is blue"
输出: "blue is sky the"
示例 2：
输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：
输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
说明：
无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
*/
#include "head.h"

void reversword(string &str,int start,int end){
    while(start<end){
        swap(str[start++],str[end--]);
    }
}

string reverseWords(string s) {
    //先整体翻转
    reversword(s,0,s.size()-1);
    int start=0,end=s.size()-1;
    //去除头空格
    while(start<s.size()&&s[start]==' '){ 
        start++;
    }
    //去除尾部空格
    while(end>=0&&s[end]==' '){   
        end--;
    }
    //按单词反转
    int i=start,l=0,r=0;
    while(i<=end){
        while(i<=end&&s[i]==' '){
            i++;
        }
        l=r=i;
        while(i<=end&&s[i]!=' '){
            r++;
            i++;
        }
        reversword(s,l,r-1);
    }
    //去除中间的空格
    int tail=start;
    for(int j=start;j<=end;j++){
        if(s[j]==' '&&s[j-1]==' ')
            continue;
        s[tail++]=s[j];
    }
    return s.substr(start,tail-start);
}

int main(){
    string s="the sky is blue";
    printstr(s);
    printstr(reverseWords(s));
    return 0;
}
